{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jossu\\\\OneDrive\\\\Asiakirjat\\\\GitHub\\\\sutsuJz.github.io\\\\chess-app\\\\src\\\\components\\\\Chessboard\\\\Chessboard.tsx\",\n  _s = $RefreshSig$();\nimport { useRef, useState } from 'react';\nimport Tile from '../Tile/Tile';\nimport './ChessboardStyles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst horizontalAxis = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'];\nconst verticalAxis = ['1', '2', '3', '4', '5', '6', '7', '8'];\n//const pieces: Piece[] = [];\n\nexport default function Chessboard() {\n  _s();\n  const [activePiece, setActivePiece] = useState(null);\n  const [gridX, setGridX] = useState(0);\n  const [gridY, setGridY] = useState(0);\n  const initialBoardState = [];\n  for (let p = 0; p < 2; p++) {\n    const type = p === 0 ? 'b' : 'w';\n    const y = p === 0 ? 7 : 0;\n    initialBoardState.push({\n      image: `assets/images/rook_${type}.png`,\n      x: 0,\n      y\n    });\n    initialBoardState.push({\n      image: `assets/images/rook_${type}.png`,\n      x: 7,\n      y\n    });\n    initialBoardState.push({\n      image: `assets/images/knight_${type}.png`,\n      x: 1,\n      y\n    });\n    initialBoardState.push({\n      image: `assets/images/knight_${type}.png`,\n      x: 6,\n      y\n    });\n    initialBoardState.push({\n      image: `assets/images/bishop_${type}.png`,\n      x: 2,\n      y\n    });\n    initialBoardState.push({\n      image: `assets/images/bishop_${type}.png`,\n      x: 5,\n      y\n    });\n    initialBoardState.push({\n      image: `assets/images/queen_${type}.png`,\n      x: 3,\n      y\n    });\n    initialBoardState.push({\n      image: `assets/images/king_${type}.png`,\n      x: 4,\n      y\n    });\n  }\n  for (let i = 0; i < 8; i++) {\n    initialBoardState.push({\n      image: 'assets/images/pawn_b.png',\n      x: i,\n      y: 6\n    });\n  }\n  for (let i = 0; i < 8; i++) {\n    initialBoardState.push({\n      image: 'assets/images/pawn_w.png',\n      x: i,\n      y: 1\n    });\n  }\n  const [pieces, setPieces] = useState(initialBoardState);\n  const chessBoardRef = useRef(null);\n  function grabPiece(e) {\n    const chessboard = chessBoardRef.current;\n    const element = e.target;\n    if (element.classList.contains('chess-piece') && chessboard) {\n      const gridX = Math.floor((e.clientX - chessboard.offsetLeft) / 100);\n      const gridY = Math.abs(Math.ceil((e.clientY - chessboard.offsetTop - 800) / 100));\n      setGridX(gridX);\n      setGridY(gridY);\n      const x = e.clientX - 50;\n      const y = e.clientY - 50;\n      element.style.position = 'absolute';\n      element.style.left = `${x}px`;\n      element.style.top = `${y}px`;\n      setActivePiece(element);\n    }\n  }\n  function movePiece(e) {\n    const chessboard = chessBoardRef.current;\n    if (activePiece && chessboard) {\n      const minX = chessboard.offsetLeft - 25;\n      const minY = chessboard.offsetTop - 25;\n      const maxX = chessboard.offsetLeft + chessboard.clientWidth - 75;\n      const maxY = chessboard.offsetTop + chessboard.clientHeight - 75;\n      const x = e.clientX - 50;\n      const y = e.clientY - 50;\n      activePiece.style.position = 'absolute';\n      //activePiece.style.left = `${x}px`;\n      //activePiece.style.top = `${y}px`;\n\n      if (x < minX) {\n        activePiece.style.left = `${minX}px`;\n      } else if (x > maxX) {\n        activePiece.style.left = `${maxX}px`;\n      } else {\n        activePiece.style.left = `${x}px`;\n      }\n      if (y < minY) {\n        activePiece.style.top = `${minY}px`;\n      } else if (y > maxY) {\n        activePiece.style.top = `${maxY}px`;\n      } else {\n        activePiece.style.top = `${y}px`;\n      }\n    }\n  }\n  function dropPiece(e) {\n    const chessboard = chessBoardRef.current;\n    if (activePiece && chessboard) {\n      const x = Math.floor((e.clientX - chessboard.offsetLeft) / 100);\n      const y = Math.abs(Math.ceil((e.clientY - chessboard.offsetTop - 800) / 100));\n      setPieces(value => {\n        const pieces = value.map(p => {\n          if (p.x === gridX && p.y === gridY) {\n            p.x = x;\n            p.y = y;\n          }\n          return p;\n        });\n        return pieces;\n      });\n      setActivePiece(null);\n    }\n  }\n  let board = [];\n  for (let j = verticalAxis.length - 1; j >= 0; j--) {\n    for (let i = 0; i < horizontalAxis.length; i++) {\n      const number = i + j + 2;\n      let image = undefined;\n      pieces.forEach(p => {\n        if (p.x === i && p.y === j) {\n          image = p.image;\n        }\n      });\n      board.push( /*#__PURE__*/_jsxDEV(Tile, {\n        image: image,\n        number: number\n      }, `${j}, ${i}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 18\n      }, this));\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    onMouseMove: e => movePiece(e),\n    onMouseDown: e => grabPiece(e),\n    onMouseUp: e => dropPiece(e),\n    id: \"chessboard\",\n    ref: chessBoardRef,\n    children: board\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 167,\n    columnNumber: 5\n  }, this);\n}\n_s(Chessboard, \"BIHUNlQl61kjLr/tbZBd9fH3UxE=\");\n_c = Chessboard;\nvar _c;\n$RefreshReg$(_c, \"Chessboard\");","map":{"version":3,"names":["useRef","useState","Tile","jsxDEV","_jsxDEV","horizontalAxis","verticalAxis","Chessboard","_s","activePiece","setActivePiece","gridX","setGridX","gridY","setGridY","initialBoardState","p","type","y","push","image","x","i","pieces","setPieces","chessBoardRef","grabPiece","e","chessboard","current","element","target","classList","contains","Math","floor","clientX","offsetLeft","abs","ceil","clientY","offsetTop","style","position","left","top","movePiece","minX","minY","maxX","clientWidth","maxY","clientHeight","dropPiece","value","map","board","j","length","number","undefined","forEach","fileName","_jsxFileName","lineNumber","columnNumber","onMouseMove","onMouseDown","onMouseUp","id","ref","children","_c","$RefreshReg$"],"sources":["C:/Users/Jossu/OneDrive/Asiakirjat/GitHub/sutsuJz.github.io/chess-app/src/components/Chessboard/Chessboard.tsx"],"sourcesContent":["import { useEffect, useRef, useState } from 'react';\r\nimport Tile from '../Tile/Tile';\r\nimport './ChessboardStyles.css';\r\n\r\nconst horizontalAxis = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'];\r\nconst verticalAxis = ['1', '2', '3', '4', '5', '6', '7', '8'];\r\n\r\ninterface Piece {\r\n  image: string;\r\n  x: number;\r\n  y: number;\r\n}\r\n\r\n//const pieces: Piece[] = [];\r\n\r\nexport default function Chessboard() {\r\n  const [activePiece, setActivePiece] = useState<HTMLElement | null>(null);\r\n  const [gridX, setGridX] = useState(0);\r\n  const [gridY, setGridY] = useState(0);\r\n  const initialBoardState: Piece[] = [];\r\n\r\n  for (let p = 0; p < 2; p++) {\r\n    const type = p === 0 ? 'b' : 'w';\r\n    const y = p === 0 ? 7 : 0;\r\n    initialBoardState.push({\r\n      image: `assets/images/rook_${type}.png`,\r\n      x: 0,\r\n      y,\r\n    });\r\n    initialBoardState.push({\r\n      image: `assets/images/rook_${type}.png`,\r\n      x: 7,\r\n      y,\r\n    });\r\n    initialBoardState.push({\r\n      image: `assets/images/knight_${type}.png`,\r\n      x: 1,\r\n      y,\r\n    });\r\n    initialBoardState.push({\r\n      image: `assets/images/knight_${type}.png`,\r\n      x: 6,\r\n      y,\r\n    });\r\n    initialBoardState.push({\r\n      image: `assets/images/bishop_${type}.png`,\r\n      x: 2,\r\n      y,\r\n    });\r\n    initialBoardState.push({\r\n      image: `assets/images/bishop_${type}.png`,\r\n      x: 5,\r\n      y,\r\n    });\r\n    initialBoardState.push({\r\n      image: `assets/images/queen_${type}.png`,\r\n      x: 3,\r\n      y,\r\n    });\r\n    initialBoardState.push({\r\n      image: `assets/images/king_${type}.png`,\r\n      x: 4,\r\n      y,\r\n    });\r\n  }\r\n\r\n  for (let i = 0; i < 8; i++) {\r\n    initialBoardState.push({ image: 'assets/images/pawn_b.png', x: i, y: 6 });\r\n  }\r\n  for (let i = 0; i < 8; i++) {\r\n    initialBoardState.push({ image: 'assets/images/pawn_w.png', x: i, y: 1 });\r\n  }\r\n\r\n  const [pieces, setPieces] = useState<Piece[]>(initialBoardState);\r\n  const chessBoardRef = useRef<HTMLDivElement>(null);\r\n  \r\n\r\n  function grabPiece(e: React.MouseEvent) {\r\n    const chessboard = chessBoardRef.current;\r\n    const element = e.target as HTMLElement;\r\n    if (element.classList.contains('chess-piece') && chessboard) {\r\n      const gridX = Math.floor((e.clientX - chessboard.offsetLeft) / 100);\r\n      const gridY = Math.abs(\r\n        Math.ceil((e.clientY - chessboard.offsetTop - 800) / 100)\r\n      );\r\n      setGridX(gridX);\r\n      setGridY(gridY);\r\n      const x = e.clientX - 50;\r\n      const y = e.clientY - 50;\r\n      element.style.position = 'absolute';\r\n      element.style.left = `${x}px`;\r\n      element.style.top = `${y}px`;\r\n      setActivePiece(element);\r\n      \r\n    }\r\n  }\r\n\r\n  function movePiece(e: React.MouseEvent) {\r\n    const chessboard = chessBoardRef.current;\r\n    if (activePiece && chessboard) {\r\n      const minX = chessboard.offsetLeft - 25;\r\n      const minY = chessboard.offsetTop - 25;\r\n      const maxX = chessboard.offsetLeft + chessboard.clientWidth - 75;\r\n      const maxY = chessboard.offsetTop + chessboard.clientHeight - 75;\r\n      const x = e.clientX - 50;\r\n      const y = e.clientY - 50;\r\n      activePiece.style.position = 'absolute';\r\n      //activePiece.style.left = `${x}px`;\r\n      //activePiece.style.top = `${y}px`;\r\n\r\n      if (x < minX) {\r\n        activePiece.style.left = `${minX}px`;\r\n      } else if (x > maxX) {\r\n        activePiece.style.left = `${maxX}px`;\r\n      } else {\r\n        activePiece.style.left = `${x}px`;\r\n      }\r\n\r\n      if (y < minY) {\r\n        activePiece.style.top = `${minY}px`;\r\n      } else if (y > maxY) {\r\n        activePiece.style.top = `${maxY}px`;\r\n      } else {\r\n        activePiece.style.top = `${y}px`;\r\n      }\r\n    }\r\n  }\r\n\r\n  function dropPiece(e: React.MouseEvent) {\r\n    const chessboard = chessBoardRef.current;\r\n    if (activePiece && chessboard) {\r\n      const x = Math.floor((e.clientX - chessboard.offsetLeft) / 100);\r\n      const y = Math.abs(\r\n        Math.ceil((e.clientY - chessboard.offsetTop - 800) / 100)\r\n      );\r\n\r\n      setPieces((value) => {\r\n        const pieces = value.map((p) => {\r\n          if (p.x === gridX && p.y === gridY) {\r\n            p.x = x;\r\n            p.y = y;\r\n          }\r\n          return p;\r\n        });\r\n        return pieces;\r\n      });\r\n      setActivePiece(null);\r\n    }\r\n  }\r\n\r\n  let board = [];\r\n  for (let j = verticalAxis.length - 1; j >= 0; j--) {\r\n    for (let i = 0; i < horizontalAxis.length; i++) {\r\n      const number = i + j + 2;\r\n      let image = undefined;\r\n\r\n      pieces.forEach((p) => {\r\n        if (p.x === i && p.y === j) {\r\n          image = p.image;\r\n        }\r\n      });\r\n\r\n      board.push(<Tile key={`${j}, ${i}`} image={image} number={number} />);\r\n    }\r\n  }\r\n  return (\r\n    <div\r\n      onMouseMove={(e) => movePiece(e)}\r\n      onMouseDown={(e) => grabPiece(e)}\r\n      onMouseUp={(e) => dropPiece(e)}\r\n      id=\"chessboard\"\r\n      ref={chessBoardRef}\r\n    >\r\n      {board}\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}