[{"C:\\Users\\Jossu\\OneDrive\\Asiakirjat\\GitHub\\sutsuJz.github.io\\chess-app\\src\\index.tsx":"1","C:\\Users\\Jossu\\OneDrive\\Asiakirjat\\GitHub\\sutsuJz.github.io\\chess-app\\src\\reportWebVitals.ts":"2","C:\\Users\\Jossu\\OneDrive\\Asiakirjat\\GitHub\\sutsuJz.github.io\\chess-app\\src\\App.tsx":"3","C:\\Users\\Jossu\\OneDrive\\Asiakirjat\\GitHub\\sutsuJz.github.io\\chess-app\\src\\components\\Chessboard\\Chessboard.tsx":"4","C:\\Users\\Jossu\\OneDrive\\Asiakirjat\\GitHub\\sutsuJz.github.io\\chess-app\\src\\components\\Juomapeli\\Juomapeli.tsx":"5","C:\\Users\\Jossu\\OneDrive\\Asiakirjat\\GitHub\\sutsuJz.github.io\\chess-app\\src\\components\\Tile\\Tile.tsx":"6"},{"size":573,"mtime":1692834948632,"results":"7","hashOfConfig":"8"},{"size":440,"mtime":1692834948633,"results":"9","hashOfConfig":"8"},{"size":771,"mtime":1692834948628,"results":"10","hashOfConfig":"8"},{"size":4910,"mtime":1692834948628,"results":"11","hashOfConfig":"8"},{"size":11497,"mtime":1692834948630,"results":"12","hashOfConfig":"8"},{"size":886,"mtime":1692834948631,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1diyrl9",{"filePath":"17","messages":"18","suppressedMessages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26"},{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34"},"C:\\Users\\Jossu\\OneDrive\\Asiakirjat\\GitHub\\sutsuJz.github.io\\chess-app\\src\\index.tsx",[],[],"C:\\Users\\Jossu\\OneDrive\\Asiakirjat\\GitHub\\sutsuJz.github.io\\chess-app\\src\\reportWebVitals.ts",[],[],"C:\\Users\\Jossu\\OneDrive\\Asiakirjat\\GitHub\\sutsuJz.github.io\\chess-app\\src\\App.tsx",[],[],"C:\\Users\\Jossu\\OneDrive\\Asiakirjat\\GitHub\\sutsuJz.github.io\\chess-app\\src\\components\\Chessboard\\Chessboard.tsx",["35"],[],"import { useEffect, useRef, useState } from 'react';\r\nimport Tile from '../Tile/Tile';\r\nimport './ChessboardStyles.css';\r\n\r\nconst horizontalAxis = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'];\r\nconst verticalAxis = ['1', '2', '3', '4', '5', '6', '7', '8'];\r\n\r\ninterface Piece {\r\n  image: string;\r\n  x: number;\r\n  y: number;\r\n}\r\n\r\n//const pieces: Piece[] = [];\r\n\r\nexport default function Chessboard() {\r\n  const [activePiece, setActivePiece] = useState<HTMLElement | null>(null);\r\n  const [gridX, setGridX] = useState(0);\r\n  const [gridY, setGridY] = useState(0);\r\n  const initialBoardState: Piece[] = [];\r\n\r\n  for (let p = 0; p < 2; p++) {\r\n    const type = p === 0 ? 'b' : 'w';\r\n    const y = p === 0 ? 7 : 0;\r\n    initialBoardState.push({\r\n      image: `assets/images/rook_${type}.png`,\r\n      x: 0,\r\n      y,\r\n    });\r\n    initialBoardState.push({\r\n      image: `assets/images/rook_${type}.png`,\r\n      x: 7,\r\n      y,\r\n    });\r\n    initialBoardState.push({\r\n      image: `assets/images/knight_${type}.png`,\r\n      x: 1,\r\n      y,\r\n    });\r\n    initialBoardState.push({\r\n      image: `assets/images/knight_${type}.png`,\r\n      x: 6,\r\n      y,\r\n    });\r\n    initialBoardState.push({\r\n      image: `assets/images/bishop_${type}.png`,\r\n      x: 2,\r\n      y,\r\n    });\r\n    initialBoardState.push({\r\n      image: `assets/images/bishop_${type}.png`,\r\n      x: 5,\r\n      y,\r\n    });\r\n    initialBoardState.push({\r\n      image: `assets/images/queen_${type}.png`,\r\n      x: 3,\r\n      y,\r\n    });\r\n    initialBoardState.push({\r\n      image: `assets/images/king_${type}.png`,\r\n      x: 4,\r\n      y,\r\n    });\r\n  }\r\n\r\n  for (let i = 0; i < 8; i++) {\r\n    initialBoardState.push({ image: 'assets/images/pawn_b.png', x: i, y: 6 });\r\n  }\r\n  for (let i = 0; i < 8; i++) {\r\n    initialBoardState.push({ image: 'assets/images/pawn_w.png', x: i, y: 1 });\r\n  }\r\n\r\n  const [pieces, setPieces] = useState<Piece[]>(initialBoardState);\r\n  const chessBoardRef = useRef<HTMLDivElement>(null);\r\n  \r\n\r\n  function grabPiece(e: React.MouseEvent) {\r\n    const chessboard = chessBoardRef.current;\r\n    const element = e.target as HTMLElement;\r\n    if (element.classList.contains('chess-piece') && chessboard) {\r\n      const gridX = Math.floor((e.clientX - chessboard.offsetLeft) / 100);\r\n      const gridY = Math.abs(\r\n        Math.ceil((e.clientY - chessboard.offsetTop - 800) / 100)\r\n      );\r\n      setGridX(gridX);\r\n      setGridY(gridY);\r\n      const x = e.clientX - 50;\r\n      const y = e.clientY - 50;\r\n      element.style.position = 'absolute';\r\n      element.style.left = `${x}px`;\r\n      element.style.top = `${y}px`;\r\n      setActivePiece(element);\r\n      \r\n    }\r\n  }\r\n\r\n  function movePiece(e: React.MouseEvent) {\r\n    const chessboard = chessBoardRef.current;\r\n    if (activePiece && chessboard) {\r\n      const minX = chessboard.offsetLeft - 25;\r\n      const minY = chessboard.offsetTop - 25;\r\n      const maxX = chessboard.offsetLeft + chessboard.clientWidth - 75;\r\n      const maxY = chessboard.offsetTop + chessboard.clientHeight - 75;\r\n      const x = e.clientX - 50;\r\n      const y = e.clientY - 50;\r\n      activePiece.style.position = 'absolute';\r\n      //activePiece.style.left = `${x}px`;\r\n      //activePiece.style.top = `${y}px`;\r\n\r\n      if (x < minX) {\r\n        activePiece.style.left = `${minX}px`;\r\n      } else if (x > maxX) {\r\n        activePiece.style.left = `${maxX}px`;\r\n      } else {\r\n        activePiece.style.left = `${x}px`;\r\n      }\r\n\r\n      if (y < minY) {\r\n        activePiece.style.top = `${minY}px`;\r\n      } else if (y > maxY) {\r\n        activePiece.style.top = `${maxY}px`;\r\n      } else {\r\n        activePiece.style.top = `${y}px`;\r\n      }\r\n    }\r\n  }\r\n\r\n  function dropPiece(e: React.MouseEvent) {\r\n    const chessboard = chessBoardRef.current;\r\n    if (activePiece && chessboard) {\r\n      const x = Math.floor((e.clientX - chessboard.offsetLeft) / 100);\r\n      const y = Math.abs(\r\n        Math.ceil((e.clientY - chessboard.offsetTop - 800) / 100)\r\n      );\r\n\r\n      setPieces((value) => {\r\n        const pieces = value.map((p) => {\r\n          if (p.x === gridX && p.y === gridY) {\r\n            p.x = x;\r\n            p.y = y;\r\n          }\r\n          return p;\r\n        });\r\n        return pieces;\r\n      });\r\n      setActivePiece(null);\r\n    }\r\n  }\r\n\r\n  let board = [];\r\n  for (let j = verticalAxis.length - 1; j >= 0; j--) {\r\n    for (let i = 0; i < horizontalAxis.length; i++) {\r\n      const number = i + j + 2;\r\n      let image = undefined;\r\n\r\n      pieces.forEach((p) => {\r\n        if (p.x === i && p.y === j) {\r\n          image = p.image;\r\n        }\r\n      });\r\n\r\n      board.push(<Tile key={`${j}, ${i}`} image={image} number={number} />);\r\n    }\r\n  }\r\n  return (\r\n    <div\r\n      onMouseMove={(e) => movePiece(e)}\r\n      onMouseDown={(e) => grabPiece(e)}\r\n      onMouseUp={(e) => dropPiece(e)}\r\n      id=\"chessboard\"\r\n      ref={chessBoardRef}\r\n    >\r\n      {board}\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\Jossu\\OneDrive\\Asiakirjat\\GitHub\\sutsuJz.github.io\\chess-app\\src\\components\\Juomapeli\\Juomapeli.tsx",["36","37","38","39"],[],"import { useEffect, useRef, useState } from 'react';\r\nimport Tile from '../Tile/Tile';\r\nimport './JuomapeliTyylit.css';\r\nimport Juomalogik from '../Juomalogik/Juomalogik';\r\n\r\nconst horizontalAxis = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'];\r\nconst verticalAxis = ['1', '2', '3', '4', '5', '6', '7', '8'];\r\n\r\ninterface Piece {\r\n  image: string;\r\n  x: number;\r\n  y: number;\r\n}\r\n\r\n//const pieces: Piece[] = [];\r\n\r\nexport default function Juomapeli() {\r\n  const [activePiece, setActivePiece] = useState<HTMLElement | null>(null);\r\n  const [gridX, setGridX] = useState(0);\r\n  const [gridY, setGridY] = useState(0);\r\n  const initialBoardState: Piece[] = [];\r\n\r\n  function getRandomInt(max: number) {\r\n    return Math.floor(Math.random() * max);\r\n  }\r\n\r\n  for (let i = 0; i < 8; i++) {\r\n    let testi1 = getRandomInt(3);\r\n    if (testi1 === 0) {\r\n      initialBoardState.push({\r\n        image: 'assets/images/tausta1.png',\r\n        x: i,\r\n        y: 6,\r\n      });\r\n    } else if (testi1 === 1) {\r\n      initialBoardState.push({\r\n        image: 'assets/images/tausta2.png',\r\n        x: i,\r\n        y: 6,\r\n      });\r\n    } else if (testi1 === 2) {\r\n      initialBoardState.push({\r\n        image: 'assets/images/tausta3.png',\r\n        x: i,\r\n        y: 6,\r\n      });\r\n    }\r\n  }\r\n\r\n  for (let i = 0; i < 8; i++) {\r\n    let testi1 = getRandomInt(3);\r\n    if (testi1 === 0) {\r\n      initialBoardState.push({\r\n        image: 'assets/images/tausta1.png',\r\n        x: i,\r\n        y: 7,\r\n      });\r\n    } else if (testi1 === 1) {\r\n      initialBoardState.push({\r\n        image: 'assets/images/tausta2.png',\r\n        x: i,\r\n        y: 7,\r\n      });\r\n    } else if (testi1 === 2) {\r\n      initialBoardState.push({\r\n        image: 'assets/images/tausta3.png',\r\n        x: i,\r\n        y: 7,\r\n      });\r\n    }\r\n  }\r\n\r\n  for (let i = 0; i < 8; i++) {\r\n    let testi1 = getRandomInt(3);\r\n    if (testi1 === 0) {\r\n      initialBoardState.push({\r\n        image: 'assets/images/tausta1.png',\r\n        x: i,\r\n        y: 5,\r\n      });\r\n    } else if (testi1 === 1) {\r\n      initialBoardState.push({\r\n        image: 'assets/images/tausta2.png',\r\n        x: i,\r\n        y: 5,\r\n      });\r\n    } else if (testi1 === 2) {\r\n      initialBoardState.push({\r\n        image: 'assets/images/tausta3.png',\r\n        x: i,\r\n        y: 5,\r\n      });\r\n    }\r\n  }\r\n\r\n  for (let i = 0; i < 8; i++) {\r\n    let testi1 = getRandomInt(3);\r\n    if (testi1 === 0) {\r\n      initialBoardState.push({\r\n        image: 'assets/images/tausta1.png',\r\n        x: i,\r\n        y: 4,\r\n      });\r\n    } else if (testi1 === 1) {\r\n      initialBoardState.push({\r\n        image: 'assets/images/tausta2.png',\r\n        x: i,\r\n        y: 4,\r\n      });\r\n    } else if (testi1 === 2) {\r\n      initialBoardState.push({\r\n        image: 'assets/images/tausta3.png',\r\n        x: i,\r\n        y: 4,\r\n      });\r\n    }\r\n  }\r\n\r\n  for (let i = 0; i < 8; i++) {\r\n    let testi1 = getRandomInt(3);\r\n    if (testi1 === 0) {\r\n      initialBoardState.push({\r\n        image: 'assets/images/tausta1.png',\r\n        x: i,\r\n        y: 3,\r\n      });\r\n    } else if (testi1 === 1) {\r\n      initialBoardState.push({\r\n        image: 'assets/images/tausta2.png',\r\n        x: i,\r\n        y: 3,\r\n      });\r\n    } else if (testi1 === 2) {\r\n      initialBoardState.push({\r\n        image: 'assets/images/tausta3.png',\r\n        x: i,\r\n        y: 3,\r\n      });\r\n    }\r\n  }\r\n  for (let i = 0; i < 8; i++) {\r\n    let testi1 = getRandomInt(3);\r\n    if (testi1 === 0) {\r\n      initialBoardState.push({\r\n        image: 'assets/images/tausta1.png',\r\n        x: i,\r\n        y: 2,\r\n      });\r\n    } else if (testi1 === 1) {\r\n      initialBoardState.push({\r\n        image: 'assets/images/tausta2.png',\r\n        x: i,\r\n        y: 2,\r\n      });\r\n    } else if (testi1 === 2) {\r\n      initialBoardState.push({\r\n        image: 'assets/images/tausta3.png',\r\n        x: i,\r\n        y: 2,\r\n      });\r\n    }\r\n  }\r\n\r\n  for (let i = 0; i < 8; i++) {\r\n    let testi1 = getRandomInt(3);\r\n    if (testi1 === 0) {\r\n      initialBoardState.push({\r\n        image: 'assets/images/tausta1.png',\r\n        x: i,\r\n        y: 1,\r\n      });\r\n    } else if (testi1 === 1) {\r\n      initialBoardState.push({\r\n        image: 'assets/images/tausta2.png',\r\n        x: i,\r\n        y: 1,\r\n      });\r\n    } else if (testi1 === 2) {\r\n      initialBoardState.push({\r\n        image: 'assets/images/tausta3.png',\r\n        x: i,\r\n        y: 1,\r\n      });\r\n    }\r\n  }\r\n\r\n  for (let i = 0; i < 8; i++) {\r\n    let testi1 = getRandomInt(3);\r\n    if (testi1 === 0) {\r\n      initialBoardState.push({\r\n        image: 'assets/images/tausta1.png',\r\n        x: i,\r\n        y: 0,\r\n      });\r\n    } else if (testi1 === 1) {\r\n      initialBoardState.push({\r\n        image: 'assets/images/tausta2.png',\r\n        x: i,\r\n        y: 0,\r\n      });\r\n    } else if (testi1 === 2) {\r\n      initialBoardState.push({\r\n        image: 'assets/images/tausta3.png',\r\n        x: i,\r\n        y: 0,\r\n      });\r\n    }\r\n  }\r\n  const [pieces, setPieces] = useState<Piece[]>(initialBoardState);\r\n  const JuomapeliRef = useRef<HTMLDivElement>(null);\r\n\r\n  function movePiece(e: React.MouseEvent) {\r\n    const Juomapeli = JuomapeliRef.current;\r\n    if (activePiece && Juomapeli) {\r\n      const minX = Juomapeli.offsetLeft - 25;\r\n      const minY = Juomapeli.offsetTop - 25;\r\n      const maxX = Juomapeli.offsetLeft + Juomapeli.clientWidth - 75;\r\n      const maxY = Juomapeli.offsetTop + Juomapeli.clientHeight - 75;\r\n      const x = e.clientX - 50;\r\n      const y = e.clientY - 50;\r\n      activePiece.style.position = 'absolute';\r\n      //activePiece.style.left = `${x}px`;\r\n      //activePiece.style.top = `${y}px`;\r\n\r\n      if (x < minX) {\r\n        activePiece.style.left = `${minX}px`;\r\n      } else if (x > maxX) {\r\n        activePiece.style.left = `${maxX}px`;\r\n      } else {\r\n        activePiece.style.left = `${x}px`;\r\n      }\r\n\r\n      if (y < minY) {\r\n        activePiece.style.top = `${minY}px`;\r\n      } else if (y > maxY) {\r\n        activePiece.style.top = `${maxY}px`;\r\n      } else {\r\n        activePiece.style.top = `${y}px`;\r\n      }\r\n    }\r\n  }\r\n\r\n  function dropPiece(e: React.MouseEvent) {\r\n    const Juomapeli = JuomapeliRef.current;\r\n    if (activePiece && Juomapeli) {\r\n      const x = Math.floor((e.clientX - Juomapeli.offsetLeft) / 100);\r\n      const y = Math.abs(\r\n        Math.ceil((e.clientY - Juomapeli.offsetTop - 800) / 100)\r\n      );\r\n\r\n      setPieces((value) => {\r\n        const pieces = value.map((p) => {\r\n          if (p.x === gridX && p.y === gridY) {\r\n            p.x = x;\r\n            p.y = y;\r\n          }\r\n          return p;\r\n        });\r\n        return pieces;\r\n      });\r\n      setActivePiece(null);\r\n    }\r\n  }\r\n\r\n  //Function for clicking pieces that opens dialog\r\n  const [ilmota, setIlmota] = useState('none'); // Initialize ilmota to 'none'\r\n  const [ilmoitus, setIlmoitus] = useState(''); // Initialize ilmoitus to empty string\r\n  function clickPiece(e: React.MouseEvent) {\r\n    const Juomapeli = JuomapeliRef.current;\r\n\r\n    const element = e.target as HTMLElement;\r\n    console.log(element);\r\n    if (Juomapeli) {\r\n      const x = Math.floor((e.clientX - Juomapeli.offsetLeft) / 100);\r\n      const y = Math.abs(\r\n        Math.ceil((e.clientY - Juomapeli.offsetTop - 800) / 100)\r\n      );\r\n\r\n      const pieceInfo = {\r\n        x: x,\r\n        y: y,\r\n      };\r\n      let juomakuva = '';\r\n      let testi2 = getRandomInt(15);\r\n      if (testi2 === 0) {\r\n        juomakuva = 'assets/images/drfri.png';\r\n        setIlmoitus('Juo valitsemasi ystävän kanssa pari siemaisua.');\r\n      } else if (testi2 === 1) {\r\n        juomakuva = 'assets/images/sponge.png';\r\n        setIlmoitus('Juo shotti!');\r\n      } else if (testi2 === 2) {\r\n        juomakuva = 'assets/images/pingu.png';\r\n        setIlmoitus('Kertaa Tinjalle miksi laiturin päästä ei hypätä pingulla');\r\n      } else if (testi2 === 3) {\r\n        juomakuva = 'assets/images/cat.png';\r\n        setIlmoitus('Ilkeä kissa. Juo juomasi loppuun.');\r\n      } else if (testi2 === 4) {\r\n        juomakuva = 'assets/images/luu.png';\r\n        setIlmoitus('Mukava kissa. Syö vaikka sipsi. Tai jotain.');\r\n      } else if (testi2 === 5) {\r\n        juomakuva = 'assets/images/kiina.png';\r\n        setIlmoitus('Heitä pinkiponkipallo kuppiin. Jos onnistut, juo. Jos et, juo enemmän.');\r\n      } else if (testi2 === 6) {\r\n        juomakuva = 'assets/images/parti.png';\r\n        setIlmoitus('Juhlapäivä. Juo juomasi loppuun.');\r\n      } else if (testi2 === 7) {\r\n        juomakuva = 'assets/images/bottle.png';\r\n        setIlmoitus('Tee bottle flip. Jos epäonnistut niin juo. Saa käyttää tupla tai kuitti.');\r\n      } else if (testi2 === 8) {\r\n        juomakuva = 'assets/images/uno.png';\r\n        setIlmoitus('Pelin suunta muuttuu. Juo.');\r\n      } else if (testi2 === 9) {\r\n        juomakuva = 'assets/images/deck.png';\r\n        setIlmoitus('Nosta kortti pakasta. Jos saat 5 tai alle juo juomasi loppuun.');\r\n      } else if (testi2 === 10) {\r\n        juomakuva = 'assets/images/uinti.png';\r\n        setIlmoitus('Käy uimassa tai juo shotti. Valitse itse.');\r\n      } else if (testi2 === 11) {\r\n        juomakuva = 'assets/images/decj.png';\r\n        setIlmoitus('Kortinveto edellistä pelaajaa vastaan. Häviäjä juo');\r\n      } else if (testi2 === 12) {\r\n        juomakuva = 'assets/images/kps.png';\r\n        setIlmoitus('Pelaa kivi-paperi-sakset. Pelaa myötäpäivään kunnes voitat. Jokaisesta tappiosta juot lisää.');\r\n      } else if (testi2 === 13) {\r\n        juomakuva = 'assets/images/hdog.png';\r\n        setIlmoitus('Mukava koira. Syö vaikka sipsi. Tai jotain.');\r\n      } else if (testi2 === 14) {\r\n        juomakuva = 'assets/images/edog.png';\r\n        setIlmoitus('Ilkeä koira. Juo juomasi loppuun.');\r\n      } \r\n\r\n      let testi = {\r\n        x: Math.floor((e.clientX - Juomapeli.offsetLeft) / 100),\r\n        y: Math.abs(Math.ceil((e.clientY - Juomapeli.offsetTop - 800) / 100)),\r\n        image: juomakuva,\r\n      };\r\n\r\n      setPieces((value) => {\r\n        const newPieces = [...value, testi];\r\n\r\n        return newPieces;\r\n      });\r\n      setTimeout(function () {\r\n      setIlmota('');\r\n      }, 2000); // 10000 milliseconds = 10 seconds\r\n      setTimeout(function () {\r\n        juomakuva = 'assets/images/x.png';\r\n        testi = {\r\n          x: Math.floor((e.clientX - Juomapeli.offsetLeft) / 100),\r\n          y: Math.abs(Math.ceil((e.clientY - Juomapeli.offsetTop - 800) / 100)),\r\n          image: juomakuva,\r\n        };\r\n        setIlmota('none');\r\n\r\n        setPieces((value) => {\r\n          const newPieces = [...value, testi];\r\n\r\n          return newPieces;\r\n        });\r\n      }, 6000); // 10000 milliseconds = 10 seconds\r\n\r\n      console.log(x, y);\r\n\r\n      console.log('Clicked piece:', pieceInfo);\r\n    }\r\n  }\r\n\r\n  let board = [];\r\n  for (let j = verticalAxis.length - 1; j >= 0; j--) {\r\n    for (let i = 0; i < horizontalAxis.length; i++) {\r\n      const number = i + j + 2;\r\n      let image = undefined;\r\n\r\n      pieces.forEach((p) => {\r\n        if (p.x === i && p.y === j) {\r\n          image = p.image;\r\n        }\r\n      });\r\n\r\n      board.push(<Tile key={`${j}, ${i}`} image={image} number={number} />);\r\n    }\r\n  }\r\n  \r\n  \r\n  return (\r\n    <div>\r\n    <div>\r\n     <h2 id={ilmota}>{ilmoitus}</h2>\r\n  </div>\r\n    <div\r\n      onMouseMove={(e) => movePiece(e)}\r\n      onMouseUp={(e) => dropPiece(e)}\r\n      onClick={(e) => clickPiece(e)}\r\n      id=\"chessboard\"\r\n      ref={JuomapeliRef}\r\n    >\r\n     \r\n      {board}\r\n    </div>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\Jossu\\OneDrive\\Asiakirjat\\GitHub\\sutsuJz.github.io\\chess-app\\src\\components\\Tile\\Tile.tsx",["40"],[],"/* eslint-disable jsx-a11y/alt-text */\r\nimport { useRef } from 'react';\r\nimport './Tile.css';\r\n\r\ninterface Props {\r\n    image?: string;\r\n    number: number;\r\n}\r\n\r\nlet tileId =  0;\r\n\r\nexport default function Tile({number, image}: Props) {\r\n\r\n   \r\n    if (number % 2 === 0) {\r\n        tileId ++ \r\n       let testi4 ='tile' + tileId.toString();\r\n        \r\n        // eslint-disable-next-line jsx-a11y/alt-text\r\n        return <div className=\"tile black-tile\" id={testi4}>\r\n            {image &&<div style={{backgroundImage: `url(${image})`}} className='chess-piece'></div>}\r\n            \r\n            </div>\r\n            \r\n} else {\r\n    tileId ++\r\n    let testi4 ='tile' +  tileId.toString();\r\n        return <div className=\"tile white-tile\" id={testi4}>\r\n             {image &&<div style={{backgroundImage: `url(${image})`}} className='chess-piece'></div>}\r\n        </div>\r\n    }\r\n    \r\n}",{"ruleId":"41","severity":1,"message":"42","line":1,"column":10,"nodeType":"43","messageId":"44","endLine":1,"endColumn":19},{"ruleId":"41","severity":1,"message":"42","line":1,"column":10,"nodeType":"43","messageId":"44","endLine":1,"endColumn":19},{"ruleId":"41","severity":1,"message":"45","line":4,"column":8,"nodeType":"43","messageId":"44","endLine":4,"endColumn":18},{"ruleId":"41","severity":1,"message":"46","line":19,"column":17,"nodeType":"43","messageId":"44","endLine":19,"endColumn":25},{"ruleId":"41","severity":1,"message":"47","line":20,"column":17,"nodeType":"43","messageId":"44","endLine":20,"endColumn":25},{"ruleId":"41","severity":1,"message":"48","line":2,"column":10,"nodeType":"43","messageId":"44","endLine":2,"endColumn":16},"@typescript-eslint/no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'Juomalogik' is defined but never used.","'setGridX' is assigned a value but never used.","'setGridY' is assigned a value but never used.","'useRef' is defined but never used."]